@page "/reserve-sled";
@using apec4_sledManagement.Library
@using apec4_sledManagement.Library.Models
@using apec4_sledManagement.Library.TransferOfDataModels

@rendermode InteractiveServer
@inject SledManagementRepo ManagementRepo;

<h3>Reserve Sled</h3>
<br />

<EditForm FormName="reserveSledForm" Model="ReserveModel" OnValidSubmit="ValidFormSubmited" style="margin-left:10%; margin-right:10%">
    <DataAnnotationsValidator />

    @* dropdown box *@
    <div class="form-floating mb-3">
        <InputSelect @bind-Value="@ReserveModel.Type" class="form-control">
            @foreach (var type in Enum.GetValues(typeof(SledType)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
        <label for="sledType">Select sled type:</label>
        <ValidationMessage For="() => ReserveModel.Type" class="text-danger" />
    </div>

    <div class="form-floating mb-3">
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="ReserveModel.StartDate" class="form-control" autocomplete="startdate" aria-required="true" />
        <label for="startdate">From when:</label>
        <ValidationMessage For="@(() => ReserveModel.StartDate)" class="text-danger"></ValidationMessage>
    </div>
    <div class="form-floating mb-3">
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="ReserveModel.EndDate" class="form-control" autocomplete="enddate" aria-required="true" />
        <label for="enddate">Till when:</label>
        <ValidationMessage For="@(() => ReserveModel.EndDate)" class="text-danger"></ValidationMessage>
    </div>

    @if (Result.Successful.HasValue && !Result.Successful.Value) // failed
    {
        <div class="alert alert-danger">@Result.Message</div>
    }
    @if (Result.Successful.HasValue && Result.Successful.Value) // succeded
    {
        <div class="alert alert-info">@Result.Message</div>
    }

    <button type="submit" class="w-100 btn btn-lg btn-primary">Reserve</button>
</EditForm>

@code {
    private ReserveSledInputModel ReserveModel { get; set; }
    private RepoResult Result { get; set; }

    protected override void OnInitialized()
    {
        Result = new();
        ReserveModel = new()
        {
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddDays(1)
        };
    }

    public void ValidFormSubmited()
    {
        Result = ManagementRepo.CreateReservationOfSled(ReserveModel);
        if (!Result.Successful.HasValue || !Result.Successful.Value) // no value or no success
        {
            return;
        }

        ReserveModel = new()
        {
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddDays(1)
        };
    }
}
